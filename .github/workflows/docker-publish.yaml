name: Build and Push Docker Image to GHCR

on:
  push:
    branches-ignore: [ "dev" ]
  workflow_dispatch:

env:
  IMAGE_NAME: gravatar
  PYTHON_VERSION: "3.13"
  NODE_VERSION: "20.x"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Prepare build context
        run: |
          mkdir -p build_context
          cp -r app build_context/
          cp Dockerfile entrypoint.sh nginx.conf requirements.txt build_context/

      - name: Install minification tools
        run: npm install -g terser csso-cli

      - name: Minify JS and CSS files in build context
        run: |
          echo "Minifying JavaScript files..."
          find ./build_context/app/static/js -type f -name "*.js" -not -name "*.min.js" \
            -exec echo "Processing JS: {}" \; \
            -exec terser {} --compress --mangle --source-map "url='${file##*/}.map'" --output {} \;

          echo "Minifying CSS files..."
          find ./build_context/app/static/css -type f -name "*.css" -not -name "*.min.css" \
            -exec echo "Processing CSS: {}" \; \
            -exec csso --input {} --output {} \;

          echo "Minification complete."

      - name: Verify minification results
        run: |
          echo " "
          echo "---- Verifying file content after minification ----"
          echo " "
          echo "File: ./build_context/app/static/js/logs/settings/ui.js"
          echo "Size:"
          ls -lh ./build_context/app/static/js/logs/settings/ui.js
          echo "Content preview:"
          cat ./build_context/app/static/js/logs/settings/ui.js
          echo " "
          echo "----------------------------------------------------"
          echo " "
          echo "File: ./build_context/app/static/css/share/errors.css"
          echo "Size:"
          ls -lh ./build_context/app/static/css/share/errors.css
          echo "Content preview:"
          cat ./build_context/app/static/css/share/errors.css
          echo " "
          echo "---- Verification complete ----"
          echo " "

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
          driver-opts: image=moby/buildkit:v0.12.4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Prepare variables and metadata
        id: meta
        run: |
          REPOSITORY_OWNER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}" | sed 's/[^a-zA-Z0-9._-]/-/g' | tr '[:upper:]' '[:lower:]')
          SHORT_SHA=$(git rev-parse --short=8 HEAD)

          echo "repository_owner=${REPOSITORY_OWNER}" >> $GITHUB_OUTPUT
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "image_path=ghcr.io/${REPOSITORY_OWNER}/${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ./build_context
          file: ./build_context/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          platforms: linux/amd64
          build-args: |
            PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          tags: |
            ${{ steps.meta.outputs.image_path }}:${{ steps.meta.outputs.branch_name }}
            ${{ steps.meta.outputs.image_path }}:${{ steps.meta.outputs.short_sha }}
            ${{ github.ref_name == 'main' && format('{0}:latest', steps.meta.outputs.image_path) || '' }}
          cache-from: type=registry,ref=${{ steps.meta.outputs.image_path }}:buildcache
          cache-to: type=registry,ref=${{ steps.meta.outputs.image_path }}:buildcache,mode=max

      - name: Show published images
        if: ${{ steps.build-and-push.outputs.digest != '' }}
        run: |
          echo "Image successfully pushed to GHCR."
          echo "Digest: ${{ steps.build-and-push.outputs.digest }}"
          echo "Published tags:"
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo " - ${{ steps.meta.outputs.image_path }}:latest"
          fi
          echo " - ${{ steps.meta.outputs.image_path }}:${{ steps.meta.outputs.branch_name }}"
          echo " - ${{ steps.meta.outputs.image_path }}:${{ steps.meta.outputs.short_sha }}"