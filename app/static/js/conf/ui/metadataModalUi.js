import {log} from "../../share/logger.js";
import {constants} from "../../share/constants.js";
import {formatHostnameForFilename} from "../../share/textUtils.js";

let metadataContent = ''; // –•—Ä–∞–Ω–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç XML-—Å—Ç—Ä–æ–∫—É, –¥–æ–±–∞–≤–ª—è—è –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏.
 * @param {string} xml - –ò—Å—Ö–æ–¥–Ω–∞—è XML-—Å—Ç—Ä–æ–∫–∞.
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π XML.
 */
function formatXml(xml) {
    let formatted = '', indent = '';
    const tab = '  '; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ –ø—Ä–æ–±–µ–ª–∞ –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞
    xml.split(/>\s*</).forEach(node => {
        if (node.match(/^\/\w/)) { // –ó–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
            indent = indent.substring(tab.length);
        }
        formatted += indent + '<' + node + '>\r\n';
        if (node.match(/^<?\w[^>]*[^\/]$/)) { // –û—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥
            indent += tab;
        }
    });
    return formatted.substring(1, formatted.length - 3);
}

/**
 * –°–æ–∑–¥–∞–µ—Ç DOM-—Å—Ç—Ä—É–∫—Ç—É—Ä—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
 */
function ensureMetadataModalExists() {
    if (document.getElementById('metadataModal')) return;

    const modalHTML = `
        <div id="metadataModal" class="modal metadata-modal" style="display: none;">
            <div class="modal-content">
                <div class="modal-title">SAML SP Metadata
                    <button id="closeMetadataModalBtn" class="close-btn">‚úï</button>
                </div>
                <div class="modal-body">
                    <pre id="metadataDisplay" class="metadata-modal-display" tabindex="0">–ó–∞–≥—Ä—É–∑–∫–∞...</pre>
                    <div class="metadata-modal-footer">
                         <button id="copyMetadataBtn" class="btn btn-icon-text">
                            <span class="btn-icon">üìã</span>
                            <span>–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</span>
                        </button>
                        <button id="saveMetadataBtn" class="btn btn-icon-text">
                            <span class="btn-icon">üíæ</span>
                            <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
    document.body.insertAdjacentHTML('beforeend', modalHTML);

    const modal = document.getElementById('metadataModal');
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            modal.style.display = 'none';
        }
    });
    document.getElementById('closeMetadataModalBtn').addEventListener('click', () => {
        modal.style.display = 'none';
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä
    document.getElementById('copyMetadataBtn').addEventListener('click', async (e) => {
        const btn = e.currentTarget;
        const originalText = btn.querySelector('span:last-child').textContent;
        try {
            await navigator.clipboard.writeText(metadataContent);
            btn.querySelector('span:last-child').textContent = constants.MSG_COPIED;
            btn.disabled = true;
            setTimeout(() => {
                btn.querySelector('span:last-child').textContent = originalText;
                btn.disabled = false;
            }, 1500);
        } catch (err) {
            log('CONF', 'Failed to copy metadata to clipboard', err, 'error');
            btn.querySelector('span:last-child').textContent = constants.MSG_COPY_ERROR;
            setTimeout(() => {
                btn.querySelector('span:last-child').textContent = originalText;
            }, 2000);
        }
    });
}

/**
 * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.
 */
async function showMetadataModal() {
    ensureMetadataModalExists(); // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ DOM –Ω–∞ –º–µ—Å—Ç–µ

    const modal = document.getElementById('metadataModal');
    const display = document.getElementById('metadataDisplay');
    const saveBtn = document.getElementById('saveMetadataBtn');
    const copyBtn = document.getElementById('copyMetadataBtn');

    modal.style.display = 'flex';
    display.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞...';
    saveBtn.disabled = true;
    copyBtn.disabled = true;

    try {
        const response = await fetch('/saml/metadata');
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.detail || `–û—à–∏–±–∫–∞ ${response.status}`);
        }
        metadataContent = await response.text(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        display.textContent = formatXml(metadataContent);

        saveBtn.onclick = () => {
            const hostname = formatHostnameForFilename(window.location.hostname);
            const filename = `${constants.SERVICE_NAME}_metadata_${hostname}.xml`;
            const blob = new Blob([metadataContent], {type: 'application/xml'});
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        };
        saveBtn.disabled = false;
        copyBtn.disabled = false;

    } catch (error) {
        metadataContent = '';
        display.textContent = `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:\n\n${error.message}`;
        saveBtn.disabled = true;
        copyBtn.disabled = true;
    }
}

export {showMetadataModal};