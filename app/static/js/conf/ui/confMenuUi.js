import {log} from '../../share/logger.js';
import {constants} from '../../share/constants.js';
import {downloadBackup, uploadRestore} from '../api.js';
import {setStatusError, setStatusOk} from './statusUi.js';
import {showPromptModal} from './promptModal.js';
import {initializeMenu} from '../../share/menuHandler.js';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–æ—Ä–º–∞—Ç—É.
 * @param {File} file - –§–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
 * @returns {Promise<{isValid: boolean, error?: string}>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏.
 */
function validateFileContent(file) {
    return new Promise((resolve) => {
        const reader = new FileReader();

        reader.onload = (e) => {
            const content = e.target.result;

            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∏–Ω–∞—Ä–Ω–æ—Å—Ç—å (–Ω–∞–ª–∏—á–∏–µ –Ω—É–ª–µ–≤—ã—Ö –±–∞–π—Ç–æ–≤)
            if (content.includes('\0')) {
                resolve({
                    isValid: false,
                    error: '–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –±–∏–Ω–∞—Ä–Ω—ã–º –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω.'
                });
                return;
            }

            const trimmedContent = content.trim();

            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ—Ç—É
            if (trimmedContent === '') {
                resolve({isValid: false, error: '–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.'});
                return;
            }

            // 3. –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—É YAML (key: value)
            // –ò—â–µ–º —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ "–∫–ª—é—á: –∑–Ω–∞—á–µ–Ω–∏–µ".
            const yamlStructureRegex = /^\s*[\w-]+:\s*.*$/m;
            if (!yamlStructureRegex.test(trimmedContent)) {
                resolve({
                    isValid: false,
                    error: '–§–∞–π–ª –Ω–µ –∏–º–µ–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã, –ø–æ—Ö–æ–∂–µ–π –Ω–∞ YAML (key: value).'
                });
                return;
            }

            resolve({isValid: true});
        };

        reader.onerror = () => {
            resolve({isValid: false, error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª.'});
        };

        reader.readAsText(file);
    });
}


/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π (–±—ç–∫–∞–ø/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ)
 */
function initConfMenu() {
    log('CONF', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π');
    const menuList = document.getElementById('confMenuList');
    const restoreFileInput = document.getElementById('restoreFileInput');

    if (!menuList || !restoreFileInput) {
        log('CONF', '–≠–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', 'warn');
        return;
    }

    const menuItems = [
        {
            label: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é',
            icon: 'üíæ',
            onClick: async () => {
                const result = await downloadBackup();
                if (result.success) {
                    setStatusOk('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ —Å–∫–∞—á–∞–Ω–∞.');
                } else {
                    setStatusError(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é.');
                }
            }
        },
        {
            label: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é',
            icon: 'üìÇ',
            onClick: () => {
                restoreFileInput.click();
            }
        }
    ];

    menuList.innerHTML = '';
    menuItems.forEach(item => {
        const li = document.createElement('li');
        li.innerHTML = `<span class="nav-menu-icon">${item.icon}</span> ${item.label}`;
        li.onclick = async () => {
            await item.onClick();
            menuList.classList.remove('show');
        };
        menuList.appendChild(li);
    });

    restoreFileInput.addEventListener('change', async (event) => {
        const file = event.target.files[0];
        if (!file) return;

        const validationResult = await validateFileContent(file);
        if (!validationResult.isValid) {
            await showPromptModal('–û—à–∏–±–∫–∞ —Ñ–∞–π–ª–∞', {
                mode: constants.PROMPT_MODE_ALERT,
                error: validationResult.error
            });
            event.target.value = null;
            return;
        }

        const confirmed = await showPromptModal(
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞?',
            {
                mode: constants.PROMPT_MODE_CONFIRM,
                help: '–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
                okLabel: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å',
                cancelLabel: '–û—Ç–º–µ–Ω–∞'
            }
        );

        if (confirmed) {
            try {
                const result = await uploadRestore(file);
                if (result.success) {
                    await showPromptModal('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞.', {mode: 'alert'});
                    window.location.reload();
                }
            } catch (e) {
                await showPromptModal('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.', {
                    mode: 'alert',
                    error: e.message
                });
            }
        }
        event.target.value = null;
    });

    initializeMenu(
        'confMenuContainer',
        'confMenuBtn',
        'confMenuList',
        constants.OPEN_CONF_MENU_ON_HOVER
    );
}

export {initConfMenu};